name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v2.3.0'

jobs:
  # Lint job runs various code quality checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum || (echo "go.mod/go.sum not tidied. Run 'go mod tidy'" && exit 1)

      - name: Check go formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"
          install-go: false

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --enable errcheck --timeout 5m

  # Test job runs unit tests on multiple Go versions
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with race detector
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  # Build job builds binaries for multiple platforms
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          output="echo-app-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output="${output}.exe"
          fi
          go build -ldflags="-s -w" -o "build/${output}" cmd/echo-app/main.go

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: echo-app-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*
          retention-days: 7

  # Integration test job
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install test tools
        run: |
          # Install grpcurl
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
          
          # Install netcat-openbsd (provides nc command)
          sudo apt-get update && sudo apt-get install -y netcat-openbsd

      - name: Build application
        run: make build-quick

      - name: Run integration tests
        run: |
          make test-integration
          # Ensure the test results file exists
          if [ -f build/test-results.log ]; then
            echo "Test results file found"
            cat build/test-results.log
          else
            echo "Test results file not found"
            ls -la build/ || echo "Build directory not found"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: build/test-results.log
          retention-days: 7
          if-no-files-found: warn

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif -severity medium ./...'
        continue-on-error: true

      - name: Upload gosec scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        with:
          sarif_file: 'gosec-results.sarif'